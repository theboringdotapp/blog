---
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import { getCollection } from "astro:content";

// Get latest 3 projects for quick selection
const projects = (await getCollection("projects"))
  .filter((project) => !project.data.draft)
  .sort((a, b) => {
    if (!a.data.date && !b.data.date) return 0;
    if (!a.data.date) return -1; // Items without dates come first (future)
    if (!b.data.date) return 1;
    // Convert MM/DD/YYYY format to proper date for sorting
    const dateA = new Date(a.data.date);
    const dateB = new Date(b.data.date);
    return dateB.getTime() - dateA.getTime();
  })
  .slice(0, 3);
---

<Layout title="New Insight" description="Create a new insight">
  <Container>
    <div class="animate my-8 max-w-lg mx-auto">
      <form id="insight-form" class="space-y-4">
        <!-- Title -->
        <div>
          <input
            type="text"
            id="title"
            name="title"
            required
            class="w-full px-4 py-3 rounded-2xl border-0 bg-slate-100 dark:bg-slate-800 
                   text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                   focus:ring-2 focus:ring-blue-500 focus:bg-white dark:focus:bg-slate-700
                   transition-all duration-200 text-lg"
            placeholder="What's on your mind?"
          />
        </div>

        <!-- Content -->
        <div class="relative">
          <textarea
            id="content"
            name="content"
            required
            rows="6"
            class="w-full px-4 py-3 pb-12 rounded-2xl border-0 bg-slate-100 dark:bg-slate-800 
                   text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                   focus:ring-2 focus:ring-blue-500 focus:bg-white dark:focus:bg-slate-700
                   transition-all duration-200 resize-none"
            placeholder="Share your thoughts... (Drag & drop screenshots here!)"
          ></textarea>
          
          <!-- Bottom Row: Formatting + Settings -->
          <div class="absolute bottom-3 left-3 right-3 flex justify-between items-center">
            <!-- Formatting Toolbar (compact) -->
            <div class="flex gap-1">
              <button type="button" class="w-8 h-8 rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm border border-slate-200/50 dark:border-slate-600/50 hover:bg-white dark:hover:bg-slate-700 transition-all duration-200 text-slate-600 dark:text-slate-400 text-sm flex items-center justify-center" data-action="bold" title="Bold">
                <strong>B</strong>
              </button>
              <button type="button" class="w-8 h-8 rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm border border-slate-200/50 dark:border-slate-600/50 hover:bg-white dark:hover:bg-slate-700 transition-all duration-200 text-slate-600 dark:text-slate-400 text-sm flex items-center justify-center" data-action="link" title="Link">
                🔗
              </button>
              <input type="file" id="image-upload" accept="image/*" class="hidden" />
              <button type="button" class="w-8 h-8 rounded-full bg-white/80 dark:bg-slate-700/80 backdrop-blur-sm border border-slate-200/50 dark:border-slate-600/50 hover:bg-white dark:hover:bg-slate-700 transition-all duration-200 text-slate-600 dark:text-slate-400 text-sm flex items-center justify-center" data-action="image" title="Add Image">
                📷
              </button>
            </div>

            <!-- Settings Button -->
            <button
              type="button"
              id="settings-toggle"
              class="px-3 py-1.5 text-xs text-slate-500 dark:text-slate-400 hover:text-slate-700 dark:hover:text-slate-300 
                     hover:bg-white/80 dark:hover:bg-slate-700/80 backdrop-blur-sm border border-slate-200/50 dark:border-slate-600/50
                     rounded-full transition-all duration-200"
            >
              ⚙️ More
            </button>
          </div>
        </div>

        <!-- Project Quick Select -->
        {projects.length > 0 && (
          <div class="space-y-2">
            <p class="text-xs text-slate-500 dark:text-slate-400 text-center">Connect to project:</p>
            <div class="flex flex-wrap gap-2 justify-center">
              {projects.map((project) => (
                <button
                  type="button"
                  class="project-btn px-3 py-1.5 text-xs bg-slate-100 dark:bg-slate-800 text-slate-600 dark:text-slate-400
                         hover:bg-blue-100 dark:hover:bg-blue-900 hover:text-blue-700 dark:hover:text-blue-300
                         border border-transparent hover:border-blue-200 dark:hover:border-blue-700
                         rounded-full transition-all duration-200 cursor-pointer"
                  data-project-id={project.id}
                >
                  {project.data.title}
                </button>
              ))}
              <button
                type="button"
                id="clear-project-btn"
                class="px-3 py-1.5 text-xs bg-slate-100 dark:bg-slate-800 text-slate-500 dark:text-slate-500
                       hover:bg-red-100 dark:hover:bg-red-900 hover:text-red-600 dark:hover:text-red-400
                       border border-transparent hover:border-red-200 dark:hover:border-red-700
                       rounded-full transition-all duration-200 cursor-pointer hidden"
              >
                ✕ Clear
              </button>
            </div>
          </div>
        )}



        <!-- Collapsible Settings -->
        <div id="settings-panel" class="hidden space-y-3">
          <!-- Tags -->
          <input
            type="text"
            id="tags"
            name="tags"
            class="w-full px-3 py-2 rounded-xl border-0 bg-slate-100 dark:bg-slate-800 
                   text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                   focus:ring-2 focus:ring-blue-500 focus:bg-white dark:focus:bg-slate-700
                   transition-all duration-200 text-sm"
            placeholder="Tags (optional)"
          />

          <!-- Hidden inputs -->
          <input type="hidden" id="date" name="date" />
          <input type="hidden" id="project" name="project" />

          <!-- GitHub Settings -->
          <div class="space-y-2 p-3 bg-slate-50 dark:bg-slate-800/50 rounded-xl">
            <input
              type="password"
              id="github-token"
              name="github-token"
              class="w-full px-3 py-2 rounded-lg border-0 bg-white dark:bg-slate-700 
                     text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                     focus:ring-2 focus:ring-blue-500 transition-all duration-200 text-sm"
              placeholder="GitHub token (ghp_xxxxx)"
            />
            
            <div class="flex gap-2">
              <input
                type="text"
                id="github-repo"
                name="github-repo"
                value="theboringdotapp/blog"
                class="flex-1 px-3 py-2 rounded-lg border-0 bg-white dark:bg-slate-700 
                       text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                       focus:ring-2 focus:ring-blue-500 transition-all duration-200 text-sm"
                placeholder="owner/repo"
              />
              
              <input
                type="text"
                id="github-branch"
                name="github-branch"
                value="main"
                class="w-20 px-3 py-2 rounded-lg border-0 bg-white dark:bg-slate-700 
                       text-slate-900 dark:text-slate-100 placeholder-slate-500 dark:placeholder-slate-400
                       focus:ring-2 focus:ring-blue-500 transition-all duration-200 text-sm"
                placeholder="branch"
              />
            </div>

            <div class="flex items-center gap-2">
              <input
                type="checkbox"
                id="save-github-settings"
                name="save-github-settings"
                class="w-3 h-3 text-blue-600 bg-white dark:bg-slate-700 border-slate-300 dark:border-slate-600 rounded focus:ring-blue-500"
              />
              <label for="save-github-settings" class="text-xs text-slate-600 dark:text-slate-400">
                Remember settings
              </label>
            </div>
          </div>
        </div>

        <!-- Send Button (WhatsApp style) -->
        <div class="flex items-center gap-3">
          <button
            type="button"
            id="preview-submit"
            class="px-4 py-3 bg-slate-200 dark:bg-slate-700 text-slate-600 dark:text-slate-400
                   rounded-2xl hover:bg-slate-300 dark:hover:bg-slate-600
                   transition-all duration-200 text-sm"
          >
            Preview
          </button>
          
          <button
            type="submit"
            id="github-submit"
            class="flex-1 px-6 py-3 bg-blue-500 hover:bg-blue-600 text-white 
                   rounded-2xl transition-all duration-200 font-medium
                   flex items-center justify-center gap-2
                   disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <span id="github-submit-text">Send</span>
            <div id="github-loading" class="hidden">
              <div class="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            </div>
            <span class="text-lg">📤</span>
          </button>
        </div>
      </form>

      <!-- Output Area -->
      <div id="output" class="mt-8 hidden">
        <h3 class="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-4">
          Generated Markdown
        </h3>
        <div class="relative">
          <pre id="markdown-output" class="bg-slate-100 dark:bg-slate-800 p-4 rounded-xl text-sm overflow-x-auto
                                          border border-slate-200 dark:border-slate-600"></pre>
          <button
            id="copy-button"
            class="absolute top-2 right-2 px-3 py-1 text-xs bg-slate-200 dark:bg-slate-700
                   text-slate-700 dark:text-slate-300 rounded-md hover:bg-slate-300 dark:hover:bg-slate-600
                   transition-colors duration-200"
          >
            Copy
          </button>
        </div>
        <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl">
          <p class="text-blue-800 dark:text-blue-200 text-sm">
            <strong>Next steps:</strong>
          </p>
          <ol class="list-decimal list-inside text-blue-700 dark:text-blue-300 text-sm mt-2 space-y-1">
            <li>Copy the markdown above</li>
            <li id="filename-instruction">Create a new file: <code class="bg-blue-100 dark:bg-blue-800 px-1 rounded"></code></li>
            <li>Paste the content and save</li>
            <li>The insight will appear on your site!</li>
          </ol>
        </div>
      </div>
    </div>
  </Container>
</Layout>



<script>
  // Initialize date field with current date and time in user's timezone (default GMT-3)
  function initializeDateField() {
    const dateField = document.getElementById('date') as HTMLInputElement;
    if (dateField) {
      // Try to get user's timezone, default to GMT-3 (Brazil)
      const now = new Date();
      
      try {
        // Use current date/time in ISO format
        dateField.value = now.toISOString();
      } catch (e) {
        // Ultimate fallback
        dateField.value = new Date().toISOString();
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    initializeDateField();
    
    // Load saved GitHub settings
    loadGitHubSettings();
    
    // Settings toggle functionality
    const settingsToggle = document.getElementById('settings-toggle');
    const settingsPanel = document.getElementById('settings-panel');
    
         settingsToggle?.addEventListener('click', () => {
       const isHidden = settingsPanel?.classList.contains('hidden');
       if (isHidden) {
         settingsPanel?.classList.remove('hidden');
         settingsToggle.textContent = '⚙️ Hide';
       } else {
         settingsPanel?.classList.add('hidden');
         settingsToggle.textContent = '⚙️ More';
       }
     });

     // Project selection functionality
     const projectButtons = document.querySelectorAll('.project-btn');
     const clearProjectBtn = document.getElementById('clear-project-btn');
     const projectInput = document.getElementById('project') as HTMLInputElement;

     projectButtons.forEach(btn => {
       btn.addEventListener('click', function(this: HTMLButtonElement) {
         // Remove active state from all buttons
         projectButtons.forEach(b => {
           b.classList.remove('bg-blue-500', 'dark:bg-blue-600', 'text-white', 'border-blue-500', 'dark:border-blue-600');
           b.classList.add('bg-slate-100', 'dark:bg-slate-800', 'text-slate-600', 'dark:text-slate-400', 'border-transparent');
         });
         
         // Add active state to clicked button
         this.classList.remove('bg-slate-100', 'dark:bg-slate-800', 'text-slate-600', 'dark:text-slate-400', 'border-transparent');
         this.classList.add('bg-blue-500', 'dark:bg-blue-600', 'text-white', 'border-blue-500', 'dark:border-blue-600');
         
         // Set project value
         const projectId = this.getAttribute('data-project-id');
         if (projectInput) {
           projectInput.value = projectId || '';
         }
         
         // Show clear button
         clearProjectBtn?.classList.remove('hidden');
       });
     });

     clearProjectBtn?.addEventListener('click', () => {
       // Remove active state from all buttons
       projectButtons.forEach(btn => {
         btn.classList.remove('bg-blue-500', 'dark:bg-blue-600', 'text-white', 'border-blue-500', 'dark:border-blue-600');
         btn.classList.add('bg-slate-100', 'dark:bg-slate-800', 'text-slate-600', 'dark:text-slate-400', 'border-transparent');
       });
       
       // Clear project value
       if (projectInput) {
         projectInput.value = '';
       }
       
       // Hide clear button
       clearProjectBtn.classList.add('hidden');
     });
  });

  // GitHub settings management
  function saveGitHubSettings() {
    const token = (document.getElementById('github-token') as HTMLInputElement).value;
    const repo = (document.getElementById('github-repo') as HTMLInputElement).value;
    const branch = (document.getElementById('github-branch') as HTMLInputElement).value;
    const saveSettings = (document.getElementById('save-github-settings') as HTMLInputElement).checked;
    
    if (saveSettings && token && repo) {
      // Simple encoding (not real encryption, just obfuscation)
      const encoded = btoa(token);
      localStorage.setItem('github_settings', JSON.stringify({
        token: encoded,
        repo,
        branch
      }));
    }
  }

  function loadGitHubSettings() {
    const saved = localStorage.getItem('github_settings');
    if (saved) {
      try {
        const settings = JSON.parse(saved);
        (document.getElementById('github-token') as HTMLInputElement).value = atob(settings.token);
        (document.getElementById('github-repo') as HTMLInputElement).value = settings.repo;
        (document.getElementById('github-branch') as HTMLInputElement).value = settings.branch;
        (document.getElementById('save-github-settings') as HTMLInputElement).checked = true;
      } catch (e) {
        console.warn('Failed to load GitHub settings:', e);
      }
    }
  }

  // GitHub API functions
  async function uploadImageToGitHub(file: File, filename: string, token: string, repo: string, branch: string = 'main') {
    const [owner, repoName] = repo.split('/');
    const path = `public/screenshots/${filename}`;
    
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = async () => {
        try {
          const base64Content = (reader.result as string).split(',')[1]; // Remove data:image/...;base64, prefix
          
          const url = `https://api.github.com/repos/${owner}/${repoName}/contents/${path}`;
          
          const response = await fetch(url, {
            method: 'PUT',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Accept': 'application/vnd.github.v3+json',
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              message: `Add screenshot: ${filename}`,
              content: base64Content,
              branch: branch
            })
          });
          
          if (!response.ok) {
            const error = await response.json();
            throw new Error(error.message || `GitHub API error: ${response.status}`);
          }
          
          resolve(await response.json());
        } catch (error) {
          reject(error);
        }
      };
      
      reader.onerror = () => reject(new Error('Failed to read file'));
      reader.readAsDataURL(file);
    });
  }

  async function pushToGitHub(content: string, filename: string, token: string, repo: string, branch: string = 'main') {
    const [owner, repoName] = repo.split('/');
    const path = `src/content/blog/${filename}`;
    
    // Encode content to base64
    const encodedContent = btoa(unescape(encodeURIComponent(content)));
    
    const url = `https://api.github.com/repos/${owner}/${repoName}/contents/${path}`;
    
    try {
      // Check if file exists
      let sha: string | undefined;
      try {
        const existingResponse = await fetch(url, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Accept': 'application/vnd.github.v3+json',
          }
        });
        
        if (existingResponse.ok) {
          const existingFile = await existingResponse.json();
          sha = existingFile.sha;
        }
      } catch (e) {
        // File doesn't exist, which is fine
      }
      
      // Create or update file
      const response = await fetch(url, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Accept': 'application/vnd.github.v3+json',
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: `Add insight: ${filename}`,
          content: encodedContent,
          branch: branch,
          ...(sha && { sha })
        })
      });
      
      if (!response.ok) {
        const error = await response.json();
        throw new Error(error.message || `GitHub API error: ${response.status}`);
      }
      
      return await response.json();
    } catch (error) {
      console.error('GitHub API Error:', error);
      throw error;
    }
  }

  // Simple markdown preview (basic implementation)
  function simpleMarkdownToHtml(markdown: string): string {
    return markdown
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/`(.*?)`/g, '<code class="bg-slate-100 dark:bg-slate-700 px-1 rounded">$1</code>')
      .replace(/\[(.*?)\]\((.*?)\)/g, '<a href="$2" class="text-blue-600 dark:text-blue-400 hover:underline">$1</a>')
      .replace(/^- (.*)$/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ul class="list-disc list-inside">$1</ul>')
      .replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1" class="max-w-full h-auto rounded" />')
      .replace(/\n\n/g, '</p><p>')
      .replace(/^(.+)$/, '<p>$1</p>')
      .replace(/^<p><\/p>/, '');
  }

  // Auto-expand textarea
  const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
  if (contentTextarea) {
    contentTextarea.addEventListener('input', () => {
      // Auto-resize textarea
      contentTextarea.style.height = 'auto';
      contentTextarea.style.height = Math.min(contentTextarea.scrollHeight, 200) + 'px';
    });
  }

  // Store dropped images temporarily
  let droppedImages: { file: File; filename: string; position: number }[] = [];

  // Image compression function
  function compressImage(file: File, maxWidth: number = 1200, maxHeight: number = 800, quality: number = 0.8): Promise<File> {
    return new Promise((resolve) => {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      img.onload = () => {
        // Calculate new dimensions
        let { width, height } = img;
        
        if (width > maxWidth || height > maxHeight) {
          const ratio = Math.min(maxWidth / width, maxHeight / height);
          width *= ratio;
          height *= ratio;
        }
        
        // Set canvas dimensions
        canvas.width = width;
        canvas.height = height;
        
        // Draw and compress
        ctx?.drawImage(img, 0, 0, width, height);
        
        canvas.toBlob((blob) => {
          if (blob) {
            const compressedFile = new File([blob], file.name, {
              type: 'image/jpeg', // Convert to JPEG for better compression
              lastModified: Date.now()
            });
            resolve(compressedFile);
          } else {
            resolve(file); // Fallback to original
          }
        }, 'image/jpeg', quality);
      };
      
      img.src = URL.createObjectURL(file);
    });
  }

  // Shared image handling function
  async function handleImageFile(file: File, position: number) {
    // Show compression feedback
    showMessage(`🔄 Compressing image...`, 'success');
    
    // Compress the image
    const compressedFile = await compressImage(file);
    
    // Generate unique filename (always use .jpg for compressed images)
    const timestamp = Date.now();
    const filename = `screenshot-${timestamp}.jpg`;
    
    // Store compressed file for later upload
    droppedImages.push({ file: compressedFile, filename, position });

    // Insert markdown at position with size constraints
    const imageMarkdown = `<img src="/screenshots/${filename}" alt="Screenshot" style="max-width: 100%; height: auto; max-height: 400px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);" />`;
    
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    const beforeText = textarea.value.substring(0, position);
    const afterText = textarea.value.substring(position);
    
    textarea.value = beforeText + imageMarkdown + afterText;
    
    // Move cursor after inserted markdown
    const newCursorPos = position + imageMarkdown.length;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    
    // Trigger auto-resize
    textarea.dispatchEvent(new Event('input'));
    
    // Calculate compression savings
    const originalSize = (file.size / 1024).toFixed(1);
    const compressedSize = (compressedFile.size / 1024).toFixed(1);
    const savings = ((1 - compressedFile.size / file.size) * 100).toFixed(0);
    
    // Show feedback with compression info
    showMessage(`📷 Screenshot ready! ${originalSize}KB → ${compressedSize}KB (${savings}% smaller)`, 'success');
  }

  // Drag and drop functionality
  if (contentTextarea) {
    let dragCounter = 0;

    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      contentTextarea.addEventListener(eventName, preventDefaults, false);
      document.body.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e: Event) {
      e.preventDefault();
      e.stopPropagation();
    }

    // Highlight drop area
    ['dragenter', 'dragover'].forEach(eventName => {
      contentTextarea.addEventListener(eventName, highlight, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      contentTextarea.addEventListener(eventName, unhighlight, false);
    });

    function highlight() {
      dragCounter++;
      contentTextarea.classList.add('border-2', 'border-blue-400', 'border-dashed', 'bg-blue-50', 'dark:bg-blue-900/20');
    }

    function unhighlight() {
      dragCounter--;
      if (dragCounter === 0) {
        contentTextarea.classList.remove('border-2', 'border-blue-400', 'border-dashed', 'bg-blue-50', 'dark:bg-blue-900/20');
      }
    }

    // Handle dropped files
    contentTextarea.addEventListener('drop', handleDrop, false);

    function handleDrop(e: DragEvent) {
      const files = e.dataTransfer?.files;
      if (!files) return;

      // Get cursor position at drop
      const cursorPosition = contentTextarea.selectionStart;

      handleFiles(files, cursorPosition);
    }

    function handleFiles(files: FileList, position: number) {
      ([...files]).forEach(file => {
        if (file.type.startsWith('image/')) {
          handleImageFile(file, position);
        }
      });
    }
  }

  // Format text function (shared between toolbar and keyboard shortcuts)
  function formatText(action: string) {
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    
    if (!textarea) return;
    
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const selectedText = textarea.value.substring(start, end);
    const beforeText = textarea.value.substring(0, start);
    const afterText = textarea.value.substring(end);
    
    let newText = '';
    let cursorOffset = 0;
    
    switch(action) {
      case 'bold':
        newText = `**${selectedText || 'bold text'}**`;
        cursorOffset = selectedText ? 0 : -2;
        break;
      case 'italic':
        newText = `*${selectedText || 'italic text'}*`;
        cursorOffset = selectedText ? 0 : -1;
        break;
      case 'code':
        newText = `\`${selectedText || 'code'}\``;
        cursorOffset = selectedText ? 0 : -1;
        break;
      case 'link':
        const url = selectedText.startsWith('http') ? selectedText : 'https://';
        const linkText = selectedText.startsWith('http') ? 'Link text' : (selectedText || 'Link text');
        newText = `[${linkText}](${url})`;
        cursorOffset = 0;
        break;
      case 'list':
        newText = selectedText ? selectedText.split('\n').map(line => `- ${line}`).join('\n') : '- List item';
        cursorOffset = selectedText ? 0 : -9;
        break;
      case 'image':
        document.getElementById('image-upload')?.click();
        return;
    }
    
    textarea.value = beforeText + newText + afterText;
    textarea.focus();
    
    const newCursorPos = start + newText.length + cursorOffset;
    textarea.setSelectionRange(newCursorPos, newCursorPos);
    
    // Trigger auto-resize
    textarea.dispatchEvent(new Event('input'));
  }

  // Keyboard shortcuts
  document.addEventListener('keydown', function(e) {
    // Only trigger shortcuts when focused on the content textarea
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    if (document.activeElement !== textarea) return;
    
    const isMac = navigator.platform.toUpperCase().indexOf('MAC') >= 0;
    const ctrlOrCmd = isMac ? e.metaKey : e.ctrlKey;
    
    if (!ctrlOrCmd) return;
    
    let action = '';
    
    switch(e.key.toLowerCase()) {
      case 'b':
        action = 'bold';
        break;
      case 'i':
        action = 'italic';
        break;
      case '`':
        action = 'code';
        break;
      case 'k':
        action = 'link';
        break;
      case 'u':
        action = 'list';
        break;
      case 'j':
        if (e.shiftKey) action = 'image';
        break;
    }
    
    if (action) {
      e.preventDefault();
      formatText(action);
    }
  });

  // Toolbar functionality
  document.querySelectorAll('[data-action]').forEach(btn => {
    btn.addEventListener('click', function(this: HTMLButtonElement) {
      const action = this.getAttribute('data-action');
      if (action) {
        formatText(action);
      }
    });
  });

  // Image upload handling
  document.getElementById('image-upload')?.addEventListener('change', function(e) {
    const file = (e.target as HTMLInputElement).files?.[0];
    if (!file) return;
    
    // Get cursor position
    const textarea = document.getElementById('content') as HTMLTextAreaElement;
    const cursorPosition = textarea.selectionStart;
    
    // Use the same function as drag and drop
    handleImageFile(file, cursorPosition);
    
    // Reset file input
    (e.target as HTMLInputElement).value = '';
  });

  function generateMarkdown(formData: FormData) {
    const title = formData.get('title') as string;
    const content = formData.get('content') as string;
    const date = formData.get('date') as string;
    const tags = formData.get('tags') as string;
    const project = formData.get('project') as string;
    
    // Generate filename from title
    const filename = title
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, '')
      .replace(/\s+/g, '-')
      .replace(/-+/g, '-')
      .trim();
    
    // Use the selected date with fallback to current time
    let selectedDate: Date;
    if (date && date.trim()) {
      selectedDate = new Date(date);
      // Check if date is valid
      if (isNaN(selectedDate.getTime())) {
        selectedDate = new Date(); // Fallback to current time
      }
    } else {
      selectedDate = new Date(); // Fallback to current time
    }
    
    // Build frontmatter
    let frontmatter = '---\n';
    frontmatter += `title: "${title}"\n`;
    frontmatter += `type: "insight"\n`;
    frontmatter += `date: ${selectedDate.toISOString()}\n`;
    
    if (tags) {
      const tagArray = tags.split(',').map(tag => `"${tag.trim()}"`).join(', ');
      frontmatter += `tags: [${tagArray}]\n`;
    }
    
    if (project) {
      frontmatter += `projectId: "${project}"\n`;
    }
    
    frontmatter += '---\n\n';
    
    const fullMarkdown = frontmatter + content;
    
    return {
      markdown: fullMarkdown,
      filename: `insight-${filename}.md`
    };
  }

  function showPreview(markdown: string, filename: string) {
    const outputDiv = document.getElementById('output');
    const markdownOutput = document.getElementById('markdown-output');
    const filenameInstruction = document.getElementById('filename-instruction');
    
    if (outputDiv && markdownOutput && filenameInstruction) {
      markdownOutput.textContent = markdown;
      
      const filenameCode = filenameInstruction.querySelector('code');
      if (filenameCode) {
        filenameCode.textContent = `src/content/blog/${filename}`;
      }
      
      outputDiv.classList.remove('hidden');
      outputDiv.scrollIntoView({ behavior: 'smooth' });
    }
  }

  function showMessage(message: string, type: 'success' | 'error' = 'success') {
    // Create notification (WhatsApp style)
    const notification = document.createElement('div');
    notification.className = `fixed top-4 left-1/2 transform -translate-x-1/2 z-50 p-3 rounded-2xl shadow-lg transition-all duration-300 translate-y-[-100px] opacity-0 ${
      type === 'success' 
        ? 'bg-green-500 text-white' 
        : 'bg-red-500 text-white'
    }`;
    notification.innerHTML = `
      <div class="flex items-center gap-2 text-sm font-medium">
        <span>${type === 'success' ? '✓' : '⚠'}</span>
        <span>${message}</span>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Animate in
    requestAnimationFrame(() => {
      notification.style.transform = 'translate(-50%, 0)';
      notification.style.opacity = '1';
    });
    
    // Remove after delay
    setTimeout(() => {
      notification.style.transform = 'translate(-50%, -100px)';
      notification.style.opacity = '0';
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // GitHub form submission
  document.getElementById('insight-form')?.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target as HTMLFormElement);
    const { markdown, filename } = generateMarkdown(formData);
    
    // GitHub settings
    const token = formData.get('github-token') as string;
    const repo = formData.get('github-repo') as string;
    const branch = (formData.get('github-branch') as string) || 'main';
    
    if (!token || !repo) {
      showMessage('Please fill in GitHub token and repository', 'error');
      return;
    }
    
    // Save settings if requested
    saveGitHubSettings();
    
    // Show loading state
    const submitBtn = document.getElementById('github-submit') as HTMLButtonElement;
    const submitText = document.getElementById('github-submit-text');
    const loading = document.getElementById('github-loading');
    
    submitBtn.disabled = true;
    submitText?.classList.add('hidden');
    loading?.classList.remove('hidden');
    
        try {
      // Upload images first if any
      if (droppedImages.length > 0) {
        for (const image of droppedImages) {
          try {
            await uploadImageToGitHub(image.file, image.filename, token, repo, branch);
            showMessage(`📷 Uploaded: ${image.filename}`, 'success');
          } catch (imageError) {
            console.error('Image upload failed:', imageError);
            showMessage(`Failed to upload ${image.filename}: ${imageError instanceof Error ? imageError.message : String(imageError)}`, 'error');
            // Continue with other images and content
          }
        }
      }
      
      // Then push the content
      await pushToGitHub(markdown, filename, token, repo, branch);
      showMessage('Insight published! 🎉', 'success');
      
      // Clear form
      (e.target as HTMLFormElement).reset();
      
      // Clear dropped images array
      droppedImages = [];
      
      // Reset date to current time
      initializeDateField();
      
      // Reset repository to default
      const repoField = document.getElementById('github-repo') as HTMLInputElement;
      if (repoField) {
        repoField.value = 'theboringdotapp/blog';
      }
      
      // Hide settings panel
      const settingsPanel = document.getElementById('settings-panel');
      const settingsToggle = document.getElementById('settings-toggle');
      if (settingsPanel && settingsToggle) {
        settingsPanel.classList.add('hidden');
        settingsToggle.textContent = '⚙️ More';
      }

      // Clear project selection
      const projectButtons = document.querySelectorAll('.project-btn');
      const clearProjectBtn = document.getElementById('clear-project-btn');
      projectButtons.forEach(btn => {
        btn.classList.remove('bg-blue-500', 'dark:bg-blue-600', 'text-white', 'border-blue-500', 'dark:border-blue-600');
        btn.classList.add('bg-slate-100', 'dark:bg-slate-800', 'text-slate-600', 'dark:text-slate-400', 'border-transparent');
      });
      clearProjectBtn?.classList.add('hidden');
      
         } catch (error) {
       console.error('Push failed:', error);
       showMessage(`Publishing failed: ${error instanceof Error ? error.message : String(error)}`, 'error');
    } finally {
      // Reset button state
      submitBtn.disabled = false;
      submitText?.classList.remove('hidden');
      loading?.classList.add('hidden');
    }
  });
  
  // Preview button
  document.getElementById('preview-submit')?.addEventListener('click', function() {
    const form = document.getElementById('insight-form') as HTMLFormElement;
    const formData = new FormData(form);
    const { markdown, filename } = generateMarkdown(formData);
    
    showPreview(markdown, filename);
  });
  
  // Copy functionality
  document.getElementById('copy-button')?.addEventListener('click', function() {
    const markdownOutput = document.getElementById('markdown-output');
    if (markdownOutput) {
      navigator.clipboard.writeText(markdownOutput.textContent || '').then(() => {
        const button = this as HTMLButtonElement;
        const originalText = button.textContent;
        button.textContent = 'Copied!';
        button.classList.add('bg-green-200', 'dark:bg-green-700');
        
        setTimeout(() => {
          button.textContent = originalText;
          button.classList.remove('bg-green-200', 'dark:bg-green-700');
        }, 2000);
      });
    }
  });
</script> 