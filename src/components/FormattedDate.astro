---
export interface Props {
  date?: Date;
  showTime?: boolean;
}

const { date, showTime = false } = Astro.props;

// Handle the case where no date is provided
if (!date) {
  return null;
}

function getRelativeDate(date: Date): string {
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const days = Math.floor(diff / (1000 * 60 * 60 * 24));
  
  const timeOptions: Intl.DateTimeFormatOptions = {
    hour: 'numeric',
    minute: '2-digit',
    hour12: true
  };
  
  const timeString = showTime ? ` at ${date.toLocaleTimeString('en-US', timeOptions)}` : '';
  
  if (days === 0) {
    return `Today${timeString}`;
  } else if (days === 1) {
    return `Yesterday${timeString}`;
  } else if (days < 7) {
    return `${days} days ago`;
  } else if (days < 30) {
    const weeks = Math.floor(days / 7);
    return weeks === 1 ? '1 week ago' : `${weeks} weeks ago`;
  } else if (days < 365) {
    const months = Math.floor(days / 30);
    return months === 1 ? '1 month ago' : `${months} months ago`;
  } else {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  }
}

const relativeDate = getRelativeDate(date);
---

<time datetime={date.toISOString()}>
  {relativeDate}
</time>
